#!/bin/bash
set -e

echo "=== LVM Root Disk Resize ==="

# Get root LVM device info
ROOT_DEVICE=$(findmnt -n -o SOURCE /)
[[ $ROOT_DEVICE == /dev/mapper/* ]] || { echo "ERROR: Root is not on LVM"; exit 1; }

VG_NAME=${ROOT_DEVICE#/dev/mapper/}
VG_NAME=${VG_NAME%-*}

PV_DEVICE=$(vgs --noheadings -o pv_name "$VG_NAME" | tr -d ' ')
[[ $PV_DEVICE =~ ^(/dev/[a-z]+)([0-9]+)$ ]] || { echo "ERROR: Cannot parse device info"; exit 1; }

DISK_DEVICE=${BASH_REMATCH[1]}
PARTITION_NUM=${BASH_REMATCH[2]}

# Check current sizes - simplified and robust approach
get_size_gb() {
    local device=$1
    local size_bytes

    size_bytes=$(lsblk -bno SIZE "$device" 2>/dev/null | head -1 | tr -d ' \n')

    if [[ "$size_bytes" =~ ^[0-9]+$ ]] && [ "$size_bytes" -lt 109951162777600 ]; then
        echo $((size_bytes / 1024 / 1024 / 1024))
        return 0
    fi

    echo "0"
    return 1
}

DISK_SIZE_GB=$(get_size_gb "$DISK_DEVICE")
PART_SIZE_GB=$(get_size_gb "$PV_DEVICE")
ROOT_SIZE_GB=$(df -BG / 2>/dev/null | awk 'NR==2 {gsub(/G/,"",$2); print int($2)}')

# Ensure we have valid values
if [ "$DISK_SIZE_GB" -eq 0 ] || [ "$PART_SIZE_GB" -eq 0 ] || [ -z "$ROOT_SIZE_GB" ]; then
    echo "Warning: Could not determine disk sizes reliably, proceeding with resize attempt"
    DISK_SIZE_GB=999
    PART_SIZE_GB=1
fi

echo "Detected: $ROOT_DEVICE on $PV_DEVICE (${DISK_SIZE_GB}GB disk, ${ROOT_SIZE_GB}GB root)"

# Check if resize is needed - only skip if we're confident sizes are accurate
if [ "$DISK_SIZE_GB" -ne 999 ] && [ "$PART_SIZE_GB" -ge "$((DISK_SIZE_GB - 1))" ]; then
    echo "Status: No resize needed - partition already uses available space"
    exit 0
fi

echo "Action: Attempting to expand root filesystem"

# Function to resize partition using parted
resize_partition_with_parted() {
    local disk_device=$1
    local partition_num=$2

    # Get current partition end and disk size in sectors
    local current_end max_end
    current_end=$(parted -s "$disk_device" unit s print 2>/dev/null | grep "^ *$partition_num" | awk '{print $3}' | sed 's/s$//')
    max_end=$(parted -s "$disk_device" unit s print 2>/dev/null | grep "^Disk" | awk '{print $3}' | sed 's/s$//')

    # Leave some space at the end for alignment
    max_end=$((max_end - 1))

    # Check if resize is needed
    if [ -n "$current_end" ] && [ -n "$max_end" ] && [ "$current_end" -ge "$max_end" ]; then
        echo "Step 1/4: [SKIPPED] Partition already correct size"
        return 0
    fi

    # Attempt to resize the partition
    if parted -s "$disk_device" resizepart "$partition_num" 100% 2>/dev/null; then
        echo "Step 1/4: [SUCCESS] Partition expanded"
        return 0
    else
        echo "Step 1/4: [FAILED] Could not resize partition"
        return 1
    fi
}

# Resize chain
if ! resize_partition_with_parted "$DISK_DEVICE" "$PARTITION_NUM"; then
    echo "ERROR: Failed to resize partition"
    exit 1
fi

if pvresize "$PV_DEVICE" 2>/dev/null; then
    echo "Step 2/4: [SUCCESS] Physical volume resized"
else
    echo "Step 2/4: [SKIPPED] PV already correct size"
fi

FREE_SPACE=$(vgs --noheadings --units b -o vg_free "$VG_NAME" | tr -d ' B')
if [ "$FREE_SPACE" -gt 10485760 ]; then
    FREE_GB=$((FREE_SPACE / 1024 / 1024 / 1024))

    if lvextend -l +100%FREE "$ROOT_DEVICE"; then
        echo "Step 3/4: [SUCCESS] Logical volume extended (+${FREE_GB}GB)"
    else
        echo "Step 3/4: [FAILED] Could not extend logical volume"
        exit 1
    fi

    FS_TYPE=$(lsblk -no FSTYPE "$ROOT_DEVICE")
    case $FS_TYPE in
        ext4|ext3|ext2)
            if resize2fs "$ROOT_DEVICE"; then
                echo "Step 4/4: [SUCCESS] ext filesystem resized"
            else
                echo "Step 4/4: [FAILED] ext filesystem resize failed"
                exit 1
            fi
            ;;
        xfs)
            if xfs_growfs /; then
                echo "Step 4/4: [SUCCESS] XFS filesystem resized"
            else
                echo "Step 4/4: [FAILED] XFS filesystem resize failed"
                exit 1
            fi
            ;;
        *)
            echo "Step 4/4: [ERROR] Unsupported filesystem: $FS_TYPE"
            exit 1
            ;;
    esac

    NEW_ROOT_SIZE_GB=$(df -BG / | awk 'NR==2 {print int($2)}')
    echo "Result: [SUCCESS] Root filesystem resized from ${ROOT_SIZE_GB}GB to ${NEW_ROOT_SIZE_GB}GB"
else
    echo "Step 3/4: [SKIPPED] No free space available after PV resize"
fi
