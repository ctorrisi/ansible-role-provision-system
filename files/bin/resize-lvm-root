#!/bin/bash
set -e

echo "=== LVM Root Disk Resize ==="

# Get root LVM device info
ROOT_DEVICE=$(findmnt -n -o SOURCE /)
[[ $ROOT_DEVICE == /dev/mapper/* ]] || { echo "ERROR: Root is not on LVM"; exit 1; }

VG_NAME=${ROOT_DEVICE#/dev/mapper/}
VG_NAME=${VG_NAME%-*}

PV_DEVICE=$(vgs --noheadings -o pv_name "$VG_NAME" | tr -d ' ')
[[ $PV_DEVICE =~ ^(/dev/[a-z]+)([0-9]+)$ ]] || { echo "ERROR: Cannot parse device info"; exit 1; }

DISK_DEVICE=${BASH_REMATCH[1]}
PARTITION_NUM=${BASH_REMATCH[2]}

# Check current sizes - more robust parsing
DISK_SIZE_GB=$(lsblk -bno SIZE "$DISK_DEVICE" 2>/dev/null | tr -d '\n' | awk '{print int($1/1024/1024/1024)}')
PART_SIZE_GB=$(lsblk -bno SIZE "$PV_DEVICE" 2>/dev/null | tr -d '\n' | awk '{print int($1/1024/1024/1024)}')
ROOT_SIZE_GB=$(df -BG / 2>/dev/null | awk 'NR==2 {gsub(/G/,"",$2); print int($2)}')

# Fallback if lsblk parsing fails
if [ -z "$DISK_SIZE_GB" ] || [ "$DISK_SIZE_GB" -eq 0 ]; then
    DISK_SIZE_GB=$(blockdev --getsize64 "$DISK_DEVICE" 2>/dev/null | awk '{print int($1/1024/1024/1024)}')
fi
if [ -z "$PART_SIZE_GB" ] || [ "$PART_SIZE_GB" -eq 0 ]; then
    PART_SIZE_GB=$(blockdev --getsize64 "$PV_DEVICE" 2>/dev/null | awk '{print int($1/1024/1024/1024)}')
fi

echo "Detected: $ROOT_DEVICE on $PV_DEVICE (${DISK_SIZE_GB}GB disk, ${ROOT_SIZE_GB}GB root)"

# Check if resize is needed
if [ "$PART_SIZE_GB" -ge "$((DISK_SIZE_GB - 1))" ]; then
    echo "Status: No resize needed - partition already uses available space"
    exit 0
fi

TARGET_SIZE=$((DISK_SIZE_GB - 2))
echo "Action: Expanding root from ${ROOT_SIZE_GB}GB to ~${TARGET_SIZE}GB"

# Resize chain
if growpart "$DISK_DEVICE" "$PARTITION_NUM" 2>/dev/null; then
    echo "Step 1/4: [SUCCESS] Partition expanded"
else
    echo "Step 1/4: [SKIPPED] Partition already correct size"
fi

if pvresize "$PV_DEVICE" 2>/dev/null; then
    echo "Step 2/4: [SUCCESS] Physical volume resized"
else
    echo "Step 2/4: [SKIPPED] PV already correct size"
fi

FREE_SPACE=$(vgs --noheadings --units b -o vg_free "$VG_NAME" | tr -d ' B')
if [ "$FREE_SPACE" -gt 10485760 ]; then
    FREE_GB=$((FREE_SPACE / 1024 / 1024 / 1024))

    if lvextend -l +100%FREE "$ROOT_DEVICE"; then
        echo "Step 3/4: [SUCCESS] Logical volume extended (+${FREE_GB}GB)"
    else
        echo "Step 3/4: [FAILED] Could not extend logical volume"
        exit 1
    fi

    FS_TYPE=$(lsblk -no FSTYPE "$ROOT_DEVICE")
    case $FS_TYPE in
        ext4|ext3|ext2)
            if resize2fs "$ROOT_DEVICE"; then
                echo "Step 4/4: [SUCCESS] ext filesystem resized"
            else
                echo "Step 4/4: [FAILED] ext filesystem resize failed"
                exit 1
            fi
            ;;
        xfs)
            if xfs_growfs /; then
                echo "Step 4/4: [SUCCESS] XFS filesystem resized"
            else
                echo "Step 4/4: [FAILED] XFS filesystem resize failed"
                exit 1
            fi
            ;;
        *)
            echo "Step 4/4: [ERROR] Unsupported filesystem: $FS_TYPE"
            exit 1
            ;;
    esac

    NEW_ROOT_SIZE_GB=$(df -BG / | awk 'NR==2 {print int($2)}')
    echo "Result: [SUCCESS] Root filesystem resized from ${ROOT_SIZE_GB}GB to ${NEW_ROOT_SIZE_GB}GB"
else
    echo "Step 3/4: [SKIPPED] No free space available after PV resize"
fi
