---
- name: facts | Gather service facts
  service_facts:

- name: packages | Install systemd-network, docker
  package:
    name:
      - systemd-network
      - docker
    state: present

- name: systemd-networkd | Enable systemd-networkd
  service:
    name: systemd-networkd
    enabled: true
  when: services['systemd-networkd.service'].status != 'enabled'

- name: NetworkManager | Stop and disable NetworkManager
  service:
    name: NetworkManager
    enabled: false
    state: stopped
  when: services['NetworkManager.service'] != None and
    services['NetworkManager.service'].status != 'not-found'

- name: NetworkManager | Remove NetworkManager
  package:
    name: NetworkManager
    state: absent

- name: systemd-networkd | Configure en* dhcp
  copy:
    dest: /etc/systemd/network/99-en-wildcard.network
    mode: 0644
    content: |
      [Match]
      Name=en*
      
      [Network]
      DHCP=yes

- name: systemd-networkd | Start systemd-networkd
  service:
    name: systemd-networkd
    state: started

- name: systemd-resolved | Enable systemd-resolved.service
  service:
    name: systemd-resolved
    enabled: yes
  when: services['systemd-resolved.service'].status != 'enabled'

- name: systemd-resolved | stub /etc/resolv.conf
  file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: true

- name: systemd-resolved | Set up cloudflare dns
  copy:
    src: ../files/resolved-cloudflare.conf
    dest: /etc/systemd/resolved.conf.d/cloudflare.conf
    owner: root
    group: root
    mode: 0644

- name: systemd-resolved | Set up docker dns
  copy:
    src: ../files/resolved-docker.conf
    dest: /etc/systemd/resolved.conf.d/docker.conf
    owner: root
    group: root
    mode: 0644

- name: systemd-resolved | Start systemd-resolved.service
  service:
    name: systemd-resolved
    state: started

- name: docker | Enable docker.service
  service:
    name: docker
    enabled: yes
  when: services['docker.service'].status != 'enabled'

- name: docker | Copy daemon.json
  copy:
    src: ../files/docker-daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 644

- name: docker | Enable docker.service
  service:
    name: docker
    state: started
  when: services['docker.service'] == None or services['docker.service'].state != 'running'

- name: users | Add admin to sudoers
  copy:
    content: 'admin ALL=(ALL:ALL) NOPASSWD:ALL'
    dest: /etc/sudoers.d/admin
    mode: 0400

- name: swap | Manage swap file
  include_tasks:
    file: swapfile.yml
  when: manage_swap_file

- name: sysctl | Copy 99-sysctl.conf
  copy:
    src: ../files/99-sysctl.conf
    dest: /etc/sysctl.d/99-sysctl.conf
  register: sysctl

- name: sysctl | Reload sysctl
  command: sysctl --system
  when: sysctl is changed

- name: sysctl | Add the nf_conntrack module
  modprobe:
    name: nf_conntrack
    state: present

- name: sysctl | Set nf_conntrack parameters
  copy:
    dest: /etc/modprobe.d/99-nf_conntrack.conf
    content: |
      options nf_conntrack hashsize=2500000

- name: sysctl | Load nf_conntrack module
  copy:
    dest: /etc/modules-load.d/nf_conntrack.conf
    content: |
      nf_conntrack

- name: sysctl | Enable and start systemd-modules-load.service
  service:
    name: systemd-modules-load
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: sysctl | Copy nf_conntrack parameters script
  copy:
    dest: /etc/nf_conntrack-params.sh
    content: |
      sysctl -w net/netfilter/nf_conntrack_tcp_loose=0
      sysctl -w net/netfilter/nf_conntrack_max=2000000
      sysctl --system
    mode: 0744

- name: sysctl | Copy nf_conntrack parameters service
  copy:
    src: ../files/nf_conntrack-params.service
    dest: /etc/systemd/system/nf_conntrack-params.service
    owner: root
    group: root
    mode: 0644

- name: sysctl | Enable and start nf_conntrack-params.service
  service:
    name: nf_conntrack-params
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: sysctl | Reload sysctl
  command: "{{ item }}"
  loop:
    - sysctl -w net.ipv4.route.flush=1
    - sysctl -w net.ipv6.route.flush=1
    - sysctl --system

- name: thp | Create disable-transparent-huge-pages.service
  copy:
    src: ../files/disable-transparent-huge-pages.service
    dest: /etc/systemd/system/disable-transparent-huge-pages.service
    owner: root
    group: root
    mode: 0644

- name: thp | Copy disable-transparent-huge-pages
  copy:
    src: ../files/disable-transparent-huge-pages
    dest: /etc/disable-transparent-huge-pages
    owner: root
    group: root
    mode: 0744

- name: thp | Enable and start disable-transparent-huge-pages service
  service:
    name: disable-transparent-huge-pages
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: iptables | Install iptables and ipset
  package:
    name:
      - iptables
      - ipset
    state: present

- name: iptables | Create iptables directory
  file:
    path: /etc/iptables
    state: directory
    owner: root
    group: root
    mode: 0755

- name: iptables | Create iptables-startup.service
  copy:
    src: ../files/iptables.service
    dest: /etc/systemd/system/iptables.service
    owner: root
    group: root
    mode: 0644

- name: iptables | Create iptables.service
  copy:
    src: ../files/iptables.service
    dest: /etc/systemd/system/iptables.service
    owner: root
    group: root
    mode: 0644

- name: iptables | Copy iptables-base.rules
  copy:
    src: ../files/iptables-base.rules
    dest:  /etc/iptables/base.rules
    owner: root
    group: root
    mode: 0644

- name: iptables | Enable iptables.service
  service:
    name: iptables
    enabled: yes
    daemon_reload: yes

- name: iptables | Create iptables-startup.service
  copy:
    src: ../files/iptables-startup.service
    dest: /etc/systemd/system/iptables-startup.service
    owner: root
    group: root
    mode: 0644

- name: iptables | Copy iptables-startup.sh
  copy:
    src: ../files/iptables-startup.sh
    dest: /etc/iptables-startup.sh
    owner: root
    group: root
    mode: 0744

- name: iptables | Enable and start iptables-startup.service
  service:
    name: iptables-startup.service
    state: stopped
    enabled: yes
    daemon_reload: yes

- name: iptables | Create ipset-blacklist configuration directory
  file:
    path: /etc/ipset-blacklist
    state: directory
    owner: root
    group: root
    mode: 0755

- name: iptables | Copy range2cidr.awk
  copy:
    src: ../files/range2cidr.awk
    dest: /etc/ipset-blacklist/range2cidr.awk
    owner: root
    group: root
    mode: 0644

- name: iptables | Create ipset-blacklist.service
  copy:
    src: ../files/ipset-blacklist.service
    dest: /etc/systemd/system/ipset-blacklist.service
    owner: root
    group: root
    mode: 0644

- name: iptables | Copy ipset-blacklist.sh
  copy:
    src: ../files/ipset-blacklist.sh
    dest: /etc/ipset-blacklist.sh
    owner: root
    group: root
    mode: 0744

- name: iptables | Enable and start ipset-blacklist service
  service:
    name: ipset-blacklist.service
    state: restarted
    enabled: yes
    daemon_reload: yes
