---
- name: zypper | Disable openSUSE DVD repository
  shell: zypper mr -d $(zypper repos | awk '$3 ~ /^openSUSE-[0-9]+-[0-9]+/{print $1}')
  when: disable_dvd_repo and ansible_facts['os_family'] == "Suse"

- name: packages | Install systemd-network, docker, iptables, ipset, dnsmasq, dnscrypt-proxy
  package:
    name:
      - docker
      - dnscrypt-proxy
      - dnsmasq
      - unzip
      - iptables
      - ipset
    state: present

- name: facts | Gather service facts
  service_facts:

- name: dnscrypt-proxy | Setup dnscrypt-proxy configuration
  copy:
    src: ../files/dnscrypt-proxy.toml
    dest: /etc/dnscrypt-proxy.toml
    owner: root
    group: root
    mode: 0644

- name: dnscrypt-proxy | Copy dnscrypt-proxy service
  copy:
    src: ../files/dnscrypt-proxy.service
    dest: /etc/systemd/system/dnscrypt-proxy.service
    owner: root
    group: root
    mode: 0644

- name: dnscrypt-proxy | Enable dnscrypt-proxy
  service:
    name: dnscrypt-proxy
    enabled: yes
    daemon_reload: yes
    state: started

- name: dnsmasq | Base configuration
  copy:
    dest: /etc/dnsmasq.d/10-base.conf
    mode: 0644
    content: |
      no-resolv
      server=127.0.0.1#5300
      listen-address=127.0.0.1
      listen-address=172.17.0.1

- name: dnsmasq | Start dnsmasq
  service:
    name: dnsmasq
    state: started
    enabled: yes

- name: resolv.conf | resolv.conf
  copy:
    dest: /etc/resolv.conf
    mode: 0644
    content: |
      nameserver 127.0.0.1

- name: NetworkManager | Disable managed DNS
  copy:
    dest: /etc/NetworkManager/NetworkManager.conf
    mode: 0644
    content: |
      [main]
      dns=none
      rc-manager=unmanaged

      [ipv4]
      dns=127.0.0.1

- name: NetworkManager | Restart NetworkManager
  service:
    name: NetworkManager
    state: restarted

- name: docker | Enable docker.service
  service:
    name: docker
    enabled: yes
  when: services['docker.service'].status != 'enabled'

- name: Create docker.service.d directory if it does not exist
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy docker override
  copy:
    src: ../files/docker-override.conf
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: 0644

- name: docker | Copy daemon.json
  copy:
    src: ../files/docker-daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 644

- name: docker | Enable docker.service
  service:
    name: docker
    state: started
  when: services['docker.service'] == None or services['docker.service'].state != 'running'

- name: users | Add admin to sudoers
  copy:
    content: 'admin ALL=(ALL:ALL) NOPASSWD:ALL'
    dest: /etc/sudoers.d/admin
    mode: 0400

- name: users | Set admin authorized keys
  authorized_key:
    user: admin
    key: "{{ authorized_keys_base64 | b64decode }}"
    state: present
    exclusive: True
  when: authorized_keys_base64 != None

- name: swap | Manage swap file
  include_tasks:
    file: swapfile.yml
  when: manage_swap_file

- name: sysctl | Copy 99-sysctl.conf
  copy:
    src: ../files/99-sysctl.conf
    dest: /etc/sysctl.d/99-sysctl.conf
  register: sysctl

- name: sysctl | Reload sysctl
  command: sysctl --system
  when: sysctl is changed

- name: sysctl | Add the nf_conntrack module
  modprobe:
    name: nf_conntrack
    state: present

- name: sysctl | Set nf_conntrack parameters
  copy:
    dest: /etc/modprobe.d/99-nf_conntrack.conf
    content: |
      options nf_conntrack hashsize=2500000

- name: sysctl | Load nf_conntrack module
  copy:
    dest: /etc/modules-load.d/nf_conntrack.conf
    content: |
      nf_conntrack

- name: sysctl | Enable and start systemd-modules-load.service
  service:
    name: systemd-modules-load
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: sysctl | Copy nf_conntrack parameters script
  copy:
    dest: /etc/nf_conntrack-params.sh
    content: |
      sysctl -w net/netfilter/nf_conntrack_tcp_loose=0
      sysctl -w net/netfilter/nf_conntrack_max=2000000
      sysctl --system
    mode: 0744

- name: sysctl | Copy nf_conntrack parameters service
  copy:
    src: ../files/nf_conntrack-params.service
    dest: /etc/systemd/system/nf_conntrack-params.service
    owner: root
    group: root
    mode: 0644

- name: sysctl | Enable and start nf_conntrack-params.service
  service:
    name: nf_conntrack-params
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: sysctl | Reload sysctl
  command: "{{ item }}"
  loop:
    - sysctl -w net.ipv4.route.flush=1
    - sysctl -w net.ipv6.route.flush=1
    - sysctl --system

- name: thp | Create disable-transparent-huge-pages.service
  copy:
    src: ../files/disable-transparent-huge-pages.service
    dest: /etc/systemd/system/disable-transparent-huge-pages.service
    owner: root
    group: root
    mode: 0644

- name: thp | Copy disable-transparent-huge-pages
  copy:
    src: ../files/disable-transparent-huge-pages
    dest: /etc/disable-transparent-huge-pages
    owner: root
    group: root
    mode: 0744

- name: thp | Enable and start disable-transparent-huge-pages service
  service:
    name: disable-transparent-huge-pages
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: iptables | Set xtables-nft-multi for iptables, iptables-save, and iptables-restore
  copy:
    dest: "/usr/share/libalternatives/{{ item }}/2.conf"
    content: |
      binary=/usr/sbin/xtables-nft-multi
      group={{ item }}
      options=KeepArgv0
  with_items:
    - iptables
    - iptables-restore
    - iptables-save

- name: iptables | Create iptables directory
  file:
    path: /etc/iptables
    state: directory
    owner: root
    group: root
    mode: 0755

- name: iptables | Create iptables-startup.service
  copy:
    src: ../files/iptables.service
    dest: /etc/systemd/system/iptables.service
    owner: root
    group: root
    mode: 0644

- name: iptables | Create iptables.service
  copy:
    src: ../files/iptables.service
    dest: /etc/systemd/system/iptables.service
    owner: root
    group: root
    mode: 0644

- name: iptables | Copy iptables-base.rules
  copy:
    src: ../files/iptables-base.rules
    dest:  /etc/iptables/base.rules
    owner: root
    group: root
    mode: 0644

- name: iptables | Enable iptables.service
  service:
    name: iptables
    enabled: yes
    daemon_reload: yes
